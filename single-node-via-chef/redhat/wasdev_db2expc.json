{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Create an Amazon EC2 instance running the Red Hat Enterprise Linux 7.2 AMI. The AMI is chosen based on the region in which the stack is run. **WARNING** This template creates an Amazon EC2 instance.",

  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ApServerAMIImageId": {
        "Description" : "The Red Hat Enterprise Linux 7.2 AMI",
        "Type": "AWS::EC2::Image::Id",
        "Default": "ami-0dd8f963"
    },
    "ApServerPrivateIpAddress" : {
      "Description" : "Private IP Address of Websphere Application Server",
      "Type" : "String",
      "Default" : "10.0.0.10",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "DBServerAMIImageId": {
        "Description" : "The Red Hat Enterprise Linux 7.2 AMI",
        "Type": "AWS::EC2::Image::Id",
        "Default": "ami-0dd8f963"
    },
    "DBServerPrivateIpAddress" : {
      "Description" : "Private IP Address of DB2 Server",
      "Type" : "String",
      "Default" : "10.0.0.11",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "WASGitRepository" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "https://github.com/kayu28/chef-wasdev.git"
    },
    "WASInstallerUrl" : {
      "Type" : "String",
      "MinLength" : "1"
    },
    "IBMUser" : {
      "Type" : "String",
      "MinLength" : "1",
      "AllowedPattern": "^([a-zA-Z0-9])+([a-zA-Z0-9\\._-])*@([a-zA-Z0-9_-])+([a-zA-Z0-9\\._-]+)+$"
    },
    "IBMPassword" : {
      "NoEcho": "true",
      "MinLength" : "1",
      "Type" : "String"
    },
    "WASProfileName" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "AppSrv01"
    },
    "WASCellName" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "node01Cell"
    },
    "WASNodeName" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "node01"
    },
    "WASServerName" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "server1"
    },
    "WASEnableAdminSecurity" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "true",
      "AllowedValues" : [ "true", "false"]
    },
    "WASProfileAdminUserName" : {
      "Description" : "The user ID that is used for administrative security",
      "Type" : "String",
      "Default" : "wasadmin"
    },
    "WASProfileAdminPassword" : {
      "Description" : "The password that is used for administrative security",
      "NoEcho": "true",
      "Type" : "String",
      "Default" : "wasadmin"
    },
    "WASAdminUserName" : {
      "Description" : "Non-root user run WebSphere Application Server",
      "Type" : "String",
      "Default" : "wasadmin"
    },
    "WASAdminPassword" : {
      "Description" : "Non-root user's password run WebSphere Application Server",
      "NoEcho": "true",
      "Type" : "String",
      "Default" : "wasadmin"
    },
    "WASDataSourceName" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "db2-ds"
    },
    "DB2DriverUrl" : {
      "Type" : "String",
      "MinLength" : "1"
    },
    "DB2User" : {
      "Type" : "String",
      "Default" : "db2inst1"
    },
    "DB2Password" : {
      "NoEcho": "true",
      "Type" : "String",
      "Default" : "db2inst1"
    },
    "DB2DatabaseName" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "testdb"
    },
    "DB2GitRepository" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "https://github.com/kayu28/chef-db2.git"
    },
    "DB2InstallerUrl" : {
      "Type" : "String",
      "MinLength" : "1"
    }
  },

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default":"Amazon EC2 Configuration" },
          "Parameters" : [ "InstanceType", "KeyName", "SSHLocation" ,"ApServerAMIImageId", "ApServerPrivateIpAddress", "DBServerAMIImageId", "DBServerPrivateIpAddress"]
        },
        {
          "Label" : { "default" : "Credential Data" },
          "Parameters" : [ "IBMUser", "IBMPassword"]
        },
        {
          "Label" : { "default" : "WebSphere Application Server Configuration" },
          "Parameters" : [ "WASGitRepository",
              "WASInstallerUrl", "WASProfileName", "WASCellName", "WASNodeName", "WASServerName", "WASEnableAdminSecurity",
              "WASProfileAdminUserName", "WASProfileAdminPassword", "WASAdminUserName", "WASAdminPassword", "WASDataSourceName", "DB2DriverUrl"]
        },
        {
          "Label" : { "default" : "DB2 Configuration" },
          "Parameters" : [ "DB2InstallerUrl", "DB2GitRepository", "DB2User", "DB2Password", "DB2DatabaseName" ]
        }
      ],
      "ParameterLabels" : {
        "WASGitRepository"        : { "default" : "Chef Cookbook URL" },
        "WASInstallerUrl"         : { "default" : "Installer URL" },
        "WASProfileName"          : { "default" : "Profile name" },
        "WASCellName"             : { "default" : "Cell name" },
        "WASNodeName"             : { "default" : "Node name" },
        "WASServerName"           : { "default" : "Server name" },
        "WASEnableAdminSecurity"  : { "default" : "Enable security in admin console" },
        "WASProfileAdminUserName" : { "default" : "Admin console user name" },
        "WASProfileAdminPassword" : { "default" : "Admin console password" },
        "WASAdminUserName"        : { "default" : "Admin user name" },
        "WASAdminPassword"        : { "default" : "Admin password" },
        "WASDataSourceName"       : { "default" : "DataSource name" },
        "DB2DriverUrl"            : { "default" : "JDBC Driver URL" },
        "DB2User"                 : { "default" : "Instance User name" },
        "DB2Password"             : { "default" : "Instance Password" },
        "DB2DatabaseName"         : { "default" : "Database name" },
        "DB2GitRepository"        : { "default" : "Chef Cookbook URL" },
        "DB2InstallerUrl"         : { "default" : "Installer URL" }
      }
    }
  },

  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "EnableDnsHostnames" : "true",
        "EnableDnsSupport" : "true",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.0.0/24",
        "AvailabilityZone" : "ap-northeast-1a",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },
    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },
    "ApServerIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "ApServerInstance" }
      }
    },
    "DBServerIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "DBServerInstance" }
      }
    },
    "ApServerInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "AttachGateway",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : ["install_package", "install_cfn", "install_chef", "install_chefdk", "install_was", "run_chef", "delete_credential"]
          },

          "install_package" : {
            "packages" : {
              "yum" : {
                "wget"  : [],
                "unzip" : [],
                "git"   : []
              }
            }
          },

          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.ApServerInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackId" }, " -r ApServerInstance ",
                  " --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "install_chef" : {
            "sources" : {
              "/var/chef/chef-repo" : "http://github.com/opscode/chef-repo/tarball/master"
            },
            "files" : {
              "/tmp/install.sh" : {
                "source" : "https://www.opscode.com/chef/install.sh",
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_make_chef_readable" : {
                "command" : "chmod +rx /var/chef"
              },
              "02_install_chef" : {
                "command" : "bash /tmp/install.sh",
                "cwd"  : "/var/chef"
              },
              "03_create_node_list" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "install_chefdk" : {
            "packages" : {
              "rpm" : {
                "chefdk" : "https://packages.chef.io/stable/el/7/chefdk-0.12.0-1.el7.x86_64.rpm"
              }
            }
          },

          "install_was" : {
            "files" : {
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks/chef-wasdev/berks-cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n",
                  "data_bag_path [ '/var/chef/chef-repo/data_bags' ]\n",
                  "encrypted_data_bag_secret [ '/var/chef/chef-repo/secret_key' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks/chef-wasdev/berks-cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n",
                  "data_bag_path [ '/var/chef/chef-repo/data_bags' ]\n",
                  "encrypted_data_bag_secret [ '/var/chef/chef-repo/secret_key' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/cookbooks/chef-wasdev/attributes/normal.rb" : {
                "content": { "Fn::Join": [ "", [
                  "normal['was']['installer_url']                  = '", {"Ref" : "WASInstallerUrl"}, "'\n",
                  "normal['was']['ibmuser']                        = '", {"Ref" : "IBMUser"}, "'\n",
                  "normal['was']['ibmpassword']                    = '", {"Ref" : "IBMPassword"}, "'\n",
                  "normal['was']['profile']['profileName']         = '", {"Ref" : "WASProfileName"}, "'\n",
                  "normal['was']['profile']['cellName']            = '", {"Ref" : "WASCellName"}, "'\n",
                  "normal['was']['profile']['nodeName']            = '", {"Ref" : "WASNodeName"}, "'\n",
                  "normal['was']['profile']['serverName']          = '", {"Ref" : "WASServerName"}, "'\n",
                  "normal['was']['profile']['enableAdminSecurity'] = '", {"Ref" : "WASEnableAdminSecurity"}, "'\n",
                  "normal['was']['profile']['adminUserName']       = '", {"Ref" : "WASProfileAdminUserName"}, "'\n",
                  "normal['was']['profile']['adminPassword']       = '", {"Ref" : "WASProfileAdminPassword"}, "'\n",
                  "normal['was']['admin']['username']              = '", {"Ref" : "WASAdminUserName"}, "'\n",
                  "normal['was']['admin']['password']              = '", {"Ref" : "WASAdminPassword"}, "'\n",
                  "normal['was']['provider']['db2driver_url']      = '", {"Ref" : "DB2DriverUrl"}, "'\n",
                  "normal['was']['auth']['dbuser']                 = '", {"Ref" : "DB2User"}, "'\n",
                  "normal['was']['auth']['dbpassword']             = '", {"Ref" : "DB2Password"}, "'\n",
                  "normal['was']['datasource']['name']             = '", {"Ref" : "WASDataSourceName"}, "'\n",
                  "normal['was']['datasource']['jndi']             = 'jdbc/", {"Ref" : "WASDataSourceName"}, "'\n",
                  "normal['was']['datasource']['database']         = '", {"Ref" : "DB2DatabaseName"}, "'\n",
                  "normal['was']['datasource']['hostname']         = '", {"Ref" : "DBServerPrivateIpAddress"}, "'\n",
                  "normal['was']['datasource']['schema']           = '", {"Ref" : "DB2User"}, "'\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_git_init" : {
                "command" : "git init",
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-wasdev"
              },
              "02_get_cookbook" : {
                "command": { "Fn::Join": [ "", [
                  "git pull ", { "Ref": "WASGitRepository" }
                ]]},
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-wasdev"
              },
              "03_mod_attributes" : {
                "command" : "echo normal[\\'was\\'][\\'profile\\'][\\'hostName\\'] = \\'`hostname`\\' >> normal.rb",
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-wasdev/attributes"
              },
              "04_init_berkshelf": {
                "command" : "berks init /var/chef/chef-repo/cookbooks/chef-wasdev --skip-vagrant --skip-git --no-chefignore",
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-wasdev",
                "env" : { "HOME" : "/var/chef" }
              },
              "05_vendorize_berkshelf" : {
                "command" : "berks vendor",
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-wasdev",
                "env" : { "HOME" : "/var/chef" }
              },
              "06_configure_node_run_list" : {
                "command" : "knife node run_list add -z `knife node list -z` recipe[was::default]",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "run_chef" : {
            "commands" : {
              "01_run_chef_client" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb | tee /tmp/chef-client-output.log",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "delete_credential" : {
            "commands" : {
              "01_delete_credential_file" : {
                "command" : "rm -f /var/chef/chef-repo/cookbooks/chef-wasdev/attributes/normal.rb"
              }
            }
          }
        }
      },

      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "Tags": [
            {
                "Key": "Name",
                "Value": "WebSphere Application Server for Developers"
            },
            {
                "Key": "Application",
                "Value": { "Ref" : "AWS::StackId"}
            }
        ],
        "ImageId" : { "Ref" : "ApServerAMIImageId" },
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "ApServerInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PublicSubnet" },
          "PrivateIpAddress"         : { "Ref" : "ApServerPrivateIpAddress"}
        }],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",

             "yum -y update\n",
             "yum -y install vim\n",
             "ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n",

             "# Install AWS CloudFormation helper scripts\n",
             "curl -kL https://bootstrap.pypa.io/get-pip.py | python\n",
             "easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
             "cp -f `pip show aws-cfn-bootstrap 2>/dev/null | grep -E \"^Location\" | awk -F: '{print $2}'`/init/redhat/cfn-hup /etc/init.d/\n",
             "chmod 755 /etc/init.d/cfn-hup\n",
             "chkconfig --add cfn-hup\n",

             "# Change the system hostname to a public DNS name\n",
             "echo preserve_hostname: true >> /etc/cloud/cloud.cfg\n",
             "IPV4=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/public-ipv4`\n",
             "HOSTNAME='ec2-'`echo $IPV4 | sed -e 's/\\./-/g'`.", { "Ref" : "AWS::Region" }, "'.compute.amazonaws.com'\n",
             "hostnamectl set-hostname $HOSTNAME\n",

             "function error_exit\n",
             "{\n",
             "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
             "  exit 1\n",
             "}\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r ApServerInstance ",
             "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

             "# Start up the cfn-hup daemon to listen for changes to the Web Server metadata\n",
             "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "DBServerInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "AttachGateway",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : ["install_package", "install_cfn", "install_chef", "install_chefdk", "install_db2", "run_chef"]
          },
          "install_package" : {
            "packages" : {
              "yum" : {
                "wget"  : [],
                "unzip" : [],
                "git"   : []
              }
            }
          },

          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.DBServerInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackId" }, " -r DBServerInstance ",
                  " --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "install_chef" : {
            "sources" : {
              "/var/chef/chef-repo" : "http://github.com/opscode/chef-repo/tarball/master"
            },
            "files" : {
              "/tmp/install.sh" : {
                "source" : "https://www.opscode.com/chef/install.sh",
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_make_chef_readable" : {
                "command" : "chmod +rx /var/chef"
              },
              "02_install_chef" : {
                "command" : "bash /tmp/install.sh",
                "cwd"  : "/var/chef"
              },
              "03_create_node_list" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "install_chefdk" : {
            "packages" : {
              "rpm" : {
                "chefdk" : "https://packages.chef.io/stable/el/7/chefdk-0.12.0-1.el7.x86_64.rpm"
              }
            }
          },

          "install_db2" : {
            "files" : {
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks/chef-db2/berks-cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n",
                  "data_bag_path [ '/var/chef/chef-repo/data_bags' ]\n",
                  "encrypted_data_bag_secret [ '/var/chef/chef-repo/secret_key' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks/chef-db2/berks-cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n",
                  "data_bag_path [ '/var/chef/chef-repo/data_bags' ]\n",
                  "encrypted_data_bag_secret [ '/var/chef/chef-repo/secret_key' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/cookbooks/chef-db2/attributes/normal.rb" : {
                "content": { "Fn::Join": [ "", [
                  "normal['db2']['installer_url']         = '", {"Ref" : "DB2InstallerUrl"}, "'\n",
                  "normal['db2']['instance']['name']      = '", {"Ref" : "DB2User"}, "'\n",
                  "normal['db2']['instance']['password']  = '", {"Ref" : "DB2Password"}, "'\n",
                  "normal['db2']['database']['name']      = '", {"Ref" : "DB2DatabaseName"}, "'\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_git_init" : {
                "command" : "git init",
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-db2"
              },
              "02_get_cookbook" : {
                "command": { "Fn::Join": [ "", [
                  "git pull ", { "Ref": "DB2GitRepository" }
                ]]},
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-db2"
              },
              "03_init_berkshelf": {
                "command" : "berks init /var/chef/chef-repo/cookbooks/chef-db2 --skip-vagrant --skip-git --no-chefignore",
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-db2",
                "env" : { "HOME" : "/var/chef" }
              },
              "04_vendorize_berkshelf" : {
                "command" : "berks vendor",
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-db2",
                "env" : { "HOME" : "/var/chef" }
              },
              "05_configure_node_run_list" : {
                "command" : "knife node run_list add -z `knife node list -z` recipe[db2]",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "run_chef" : {
            "commands" : {
              "01_run_chef_client" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb | tee /tmp/chef-client-output.log",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          }
        }
      },

      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "Tags": [
            {
                "Key": "Name",
                "Value": "DB2 Express-C"
            },
            {
                "Key": "Application",
                "Value": { "Ref" : "AWS::StackId"}
            }
        ],
        "ImageId" : { "Ref" : "DBServerAMIImageId" },
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "DBServerInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PublicSubnet" },
          "PrivateIpAddress"         : { "Ref" : "DBServerPrivateIpAddress"}
        }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",

             "yum -y update\n",
             "yum -y install vim\n",
             "ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n",

             "# Install AWS CloudFormation helper scripts\n",
             "curl -kL https://bootstrap.pypa.io/get-pip.py | python\n",
             "easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
             "cp -f `pip show aws-cfn-bootstrap 2>/dev/null | grep -E \"^Location\" | awk -F: '{print $2}'`/init/redhat/cfn-hup /etc/init.d/\n",
             "chmod 755 /etc/init.d/cfn-hup\n",
             "chkconfig --add cfn-hup\n",

             "function error_exit\n",
             "{\n",
             "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
             "  exit 1\n",
             "}\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r DBServerInstance ",
             "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

             "# Start up the cfn-hup daemon to listen for changes to the Web Server metadata\n",
             "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : ["ApServerInstance","DBServerInstance"],
      "Properties" : {
        "Handle" : { "Ref" : "WaitHandle" },
        "Timeout" : "2500"
      }
    },

    "ApServerInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "9043", "ToPort" : "9043", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "8880", "ToPort" : "8880", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "9080", "ToPort" : "9080", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0" }
         ]
      }
    },

    "DBServerInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "50000", "ToPort" : "50000", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0" }
         ]
      }
    }

  },

  "Outputs" : {
    "ApServerInstanceId" : {
      "Description" : "InstanceId of Websphere Application Server",
      "Value" : { "Ref" : "ApServerInstance" }
    },
    "ApServerPublicDNS" : {
      "Description" : "Public DNSName of Websphere Application Server",
      "Value" : { "Fn::GetAtt" : [ "ApServerInstance", "PublicDnsName" ] }
    },
    "ApServerPublicIP" : {
      "Description" : "Public IP address of Websphere Application Server",
      "Value" : { "Fn::GetAtt" : [ "ApServerInstance", "PublicIp" ] }
    },
    "AdministrativeConsoleURL" : {
      "Description" : "Websphere Application Server Administrative Console",
      "Value" : { "Fn::Join" : ["", ["https://", { "Fn::GetAtt" : [ "ApServerInstance", "PublicIp" ]}, ":9043/ibm/console" ]] }
    },
    "DBServerInstanceId" : {
      "Description" : "InstanceId of DB2",
      "Value" : { "Ref" : "DBServerInstance" }
    },
    "DBServerPublicDNS" : {
      "Description" : "Public DNSName of DB2",
      "Value" : { "Fn::GetAtt" : [ "DBServerInstance", "PublicDnsName" ] }
    },
    "DBServerPublicIP" : {
      "Description" : "Public IP address of DB2",
      "Value" : { "Fn::GetAtt" : [ "DBServerInstance", "PublicIp" ] }
    }
  }
}
