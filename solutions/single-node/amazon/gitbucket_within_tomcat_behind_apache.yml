AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
  License: Apache-2.0
Description: >
    AWS CloudFormation Template gitbucket_within_tomcat_behind_apache:
    This template installs GitBucket on a Amazon Linux 2017.03.1.20170623 instance.
Parameters:
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Description: Gitbucket server EC2 instance type
    Type: String
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
  VpcId:
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Type: AWS::EC2::VPC::Id
  SubnetId:
    ConstraintDescription: must be an existing subnet in the selected Virtual Private Cloud.
    Description: SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)
    Type: AWS::EC2::Subnet::Id
  PrivateIpAddress:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: Private IP address of gitbucket server
    Type: String
  Monitoring:
    Description: Specifies whether detailed monitoring is enabled for the instance
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  TomcatAdminUser:
    Description: Tomcat web application manager user name
    Type: String
    MinLength: '1'
    Default: admin
  TomcatAdminPassword:
    Description: Tomcat web application manager password
    Type: String
    NoEcho: true
    MinLength: '1'
  GitbucketVersion:
    Description: Gitbucket version
    Type: String
    MinLength: '1'
    Default: 4.12.1
  GitbucketHome:
    Type: String
    MinLength: '1'
    Default: /var/opt/gitbucket
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Instance Configuration
      Parameters:
      - KeyName
      - InstanceType
      - VpcId
      - SubnetId
      - PrivateIpAddress
      - Monitoring
      - SSHLocation
    - Label:
        default: Tomcat Configuration
      Parameters:
      - TomcatAdminUser
      - TomcatAdminPassword
    - Label:
        default: Gitbucket Configuration
      Parameters:
      - GitbucketVersion
      - GitbucketHome
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-3bd3c45c
      PV64: ami-d3d3c4b4
    ap-northeast-2:
      HVM64: ami-e21cc38c
      PV64: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-77af2014
      PV64: ami-42901f21
    ap-southeast-2:
      HVM64: ami-10918173
      PV64: ami-43918120
    ap-south-1:
      HVM64: ami-47205e28
      PV64: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-5b06d634
      PV64: ami-4dbc1a22
    eu-west-1:
      HVM64: ami-d7b9a2b1
      PV64: ami-c4bba0a2
    sa-east-1:
      HVM64: ami-87dab1eb
      PV64: ami-1cdab170
    us-east-1:
      HVM64: ami-a4c7edb2
      PV64: ami-abc1ebbd
    us-west-1:
      HVM64: ami-327f5352
      PV64: ami-347e5254
    us-west-2:
      HVM64: ami-6df1e514
      PV64: ami-98f3e7e1
Resources:
  ProvisioningLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ['-', [!Ref 'AWS::StackName', 'ProvisioningLogs']]
  SystemLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ['-', [!Ref 'AWS::StackName', 'SystemLogs']]
  WebServerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ['-', [!Ref 'AWS::StackName', 'WebServerLogs']]
  TomcatLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ['-', [!Ref 'AWS::StackName', 'TomcatLogs']]
  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: s3
      - PolicyDocument:
          Statement:
          - Action:
            - logs:*
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: '2012-10-17'
        PolicyName: logs
      - PolicyDocument:
          Statement:
          - Action:
            - ses:SendRawEmail
            - ses:SendEmail
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: ses
  Ec2RoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: Ec2Role
  GitBucketSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gitbucket Security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - CidrIp: !Ref SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: !Ref SSHLocation
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: !Ref SSHLocation
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      - CidrIp: 0.0.0.0/0
        FromPort: '-1'
        IpProtocol: icmp
        ToPort: '-1'
      Tags:
      - Key: Name
        Value: !Sub |
          ${AWS::StackName} - GitBucket Security Group
  GitBucketServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - install_cfn
          - make_swap
          - install_package
          - configure_httpd
          - configure_tomcat
          - install_gitbucket
          - configure_awslogs
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.GitBucketServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r GitBucketServerInstance --region ${AWS::Region}
                runas=root
              group: root
              mode: '000400'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        make_swap:
          files:
            /etc/rc.d/init.d/swap:
              source: https://raw.githubusercontent.com/kayu28/aws-cloudformation/master/solutions/util/swap
              owner: root
              group: root
              mode: '000755'
          services:
            sysvinit:
              swap:
                enabled: 'true'
                ensureRunning: 'true'
        install_package:
          packages:
            yum:
              httpd24                  : []
              httpd24-devel            : []
              java-1.8.0-openjdk-devel : []
              tomcat8                  : []
              tomcat8-admin-webapps    : []
              awslogs                  : []
          commands:
            01_update-alternatives:
              command: echo 2 | update-alternatives --config java
        configure_httpd:
          files:
            /etc/httpd/conf.d/security.conf:
              content: !Sub |
                ServerTokens Prod
                TraceEnable Off
                Header always set x-content-type-options nosniff
                Header always unset "X-Powered-By"
                Header always append X-Frame-Options SAMEORIGIN
                Header always set X-XSS-Protection "1; mode=block"
                <Directory /var/www/html>
                    AllowOverride All
                    Options -Indexes
                </Directory>
              owner: apache
              group: apache
              mode: '000644'
          commands:
            01_modify_conf:
              command: !Sub |
                \cp -f /dev/null /etc/httpd/conf.d/autoindex.conf
                \cp -f /dev/null /etc/httpd/conf.d/welcome.conf
                cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.origin
                sed -i -e "s/AddDefaultCharset/#AddDefaultCharset/" /etc/httpd/conf/httpd.conf
                sed -ie '/CustomLog.*combined/i \    SetEnvIf Request_URI "\\.(gif|jpg|png|js)$" no_log' /etc/httpd/conf/httpd.conf
                sed -ie '/CustomLog.*combined/s/$/ env=!no_log/g' /etc/httpd/conf/httpd.conf
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
        configure_tomcat:
          files:
            /etc/httpd/conf.d/tomcat.conf:
              content: !Sub |
                ProxyPass /tomcat/       ajp://localhost:8009/
                ProxyPass /manager/      ajp://localhost:8009/manager/
                ProxyPass /host-manager/ ajp://localhost:8009/host-manager/
              owner: root
              group: root
              mode: '000644'
            /usr/share/tomcat8/conf/tomcat-users.xml:
              content: !Sub |
                <?xml version='1.0' encoding='utf-8'?>
                <tomcat-users xmlns="http://tomcat.apache.org/xml"
                              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                              xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
                              version="1.0">
                  <role rolename="admin-gui"/>
                  <role rolename="admin-script"/>
                  <role rolename="manager-gui"/>
                  <role rolename="manager-status"/>
                  <role rolename="manager-script"/>
                  <user username="${TomcatAdminUser}"
                        password="${TomcatAdminPassword}"
                        roles="admin-gui,admin-script,manager-gui,manager-status,manager-script" />
                </tomcat-users>
              owner: root
              group: tomcat
              mode: '000644'
            /etc/tomcat8/logging.properties:
              content: !Sub |
                handlers = 1catalina.java.util.logging.FileHandler, \
                           2localhost.java.util.logging.FileHandler, \
                           3manager.java.util.logging.FileHandler, \
                           4host-manager.java.util.logging.FileHandler, \
                           java.util.logging.ConsoleHandler
                .handlers = 1catalina.java.util.logging.FileHandler, java.util.logging.ConsoleHandler

                1catalina.java.util.logging.FileHandler.level = FINE
                1catalina.java.util.logging.FileHandler.pattern = ${!catalina.base}/logs/catalina.log
                2localhost.java.util.logging.FileHandler.level = FINE
                2localhost.java.util.logging.FileHandler.pattern = ${!catalina.base}/logs/localhost.log
                3manager.java.util.logging.FileHandler.level = FINE
                3manager.java.util.logging.FileHandler.pattern = ${!catalina.base}/logs/manager.log
                4host-manager.java.util.logging.FileHandler.level = FINE
                4host-manager.java.util.logging.FileHandler.pattern = ${!catalina.base}/logs/host-manager.log
                java.util.logging.ConsoleHandler.level = FINE
                java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

                org.apache.catalina.core.ContainerBase.[Catalina].[localhost].level = INFO
                org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers = 2localhost.java.util.logging.FileHandler
                org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].level = INFO
                org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].handlers = 3manager.java.util.logging.FileHandler
                org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager].level = INFO
                org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager].handlers = 4host-manager.java.util.logging.FileHandler
              owner: root
              group: tomcat
              mode: '000644'
          commands:
            01_modify_serverinfo_props:
              command: !Sub |
                jar xf catalina.jar org/apache/catalina/util/ServerInfo.properties
                sed -ie "s/server.info=.*$/server.info=/" org/apache/catalina/util/ServerInfo.properties
                sed -ie "s/server.number=.*$/server.number=/" org/apache/catalina/util/ServerInfo.properties
                sed -ie "s/server.built=.*$/server.built=/" org/apache/catalina/util/ServerInfo.properties
                jar uf catalina.jar org/apache/catalina/util/ServerInfo.properties
                rm -fr org
              cwd: /usr/share/tomcat8/lib
            02_modify_server_conf:
              command: !Sub |
                sed -ie '/<Connector port="8080"/,/\/>/s/^\(.*\)$/<!--\1-->/g' /etc/tomcat8/server.xml
                sed -ie "s/8005/12345/" /etc/tomcat8/server.xml
                sed -ie "s/AccessLogValve\"/AccessLogValve\" rotatable=\"false\"/" /etc/tomcat8/server.xml
                sed -ie "s/prefix=\"localhost_access_log\"/prefix=\"localhost_access\"/" /etc/tomcat8/server.xml
                sed -ie "s/suffix=\".txt\"/suffix=\".log\"/" /etc/tomcat8/server.xml
        install_gitbucket:
          files:
            /etc/httpd/conf.d/gitbucket.conf:
              content: !Sub |
                <Location /gitbucket>
                    ProxyPass ajp://localhost:8009/gitbucket
                    ProxyPassReverse ajp://localhost:8009/gitbucket
                </Location>
              owner: root
              group: root
              mode: '000644'
          commands:
            01_set_catalina_opts:
              command: !Sub |
                echo 'CATALINA_OPTS="-Dfile.encoding=UTF-8 -Dgitbucket.home='${GitbucketHome}'"' >> /usr/share/tomcat8/conf/tomcat8.conf
            02_download_gitbucket:
              command: !Sub |
                wget -q -P /usr/share/tomcat8/webapps https://github.com/gitbucket/gitbucket/releases/download/${GitbucketVersion}/gitbucket.war
            03_create_gitbucket_home:
              command: !Sub |
                mkdir ${GitbucketHome}
                chown tomcat:tomcat ${GitbucketHome}
            04_restart:
              command: !Sub |
                service httpd restart
          services:
            sysvinit:
              tomcat8:
                enabled: 'true'
                ensureRunning: 'true'
        configure_awslogs:
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              group: root
              owner: root
              mode: '000444'
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${ProvisioningLogs}
                log_stream_name = {instance_id}/cloud-init.log
                multi_line_start_pattern = {datetime_format}
                datetime_format = %b %d %H:%M:%S

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${ProvisioningLogs}
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format = 

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${ProvisioningLogs}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format = %Y-%m-%d %H:%M:%S
                multi_line_start_pattern = {datetime_format}

                [/var/log/cfn-init-cmd.log]
                file = /var/log/cfn-init-cmd.log
                log_group_name = ${ProvisioningLogs}
                log_stream_name = {instance_id}/cfn-init-cmd.log
                datetime_format = %Y-%m-%d %H:%M:%S
                multi_line_start_pattern = {datetime_format}

                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = ${ProvisioningLogs}
                log_stream_name = {instance_id}/cfn-hup.log
                datetime_format = %Y-%m-%d %H:%M:%S
                multi_line_start_pattern = {datetime_format}

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${ProvisioningLogs}
                log_stream_name = {instance_id}/cfn-wire.log
                multi_line_start_pattern = {datetime_format}
                datetime_format = %Y-%m-%d %H:%M:%S

                [/var/log/httpd/access_log]
                file = /var/log/httpd/access_log
                log_group_name = ${WebServerLogs}
                log_stream_name = {instance_id}/apache_access.log
                multi_line_start_pattern = {datetime_format}
                datetime_format = %d/%b/%Y:%H:%M:%S %z

                [/var/log/httpd/error_log]
                file = /var/log/httpd/error_log
                log_group_name = ${WebServerLogs}
                log_stream_name = {instance_id}/apache_error.log
                multi_line_start_pattern = {datetime_format}
                datetime_format = %d/%b/%Y:%H:%M:%S %z

                [/var/log/tomcat8/catalina.out]
                file = /var/log/tomcat8/catalina.out
                log_group_name = ${TomcatLogs}
                log_stream_name = {instance_id}/catalina.out
                multi_line_start_pattern = {datetime_format}
                datetime_format = %d-%b-%Y %H:%M:%S

                [/var/log/tomcat8/catalina.log]
                file = /var/log/tomcat8/catalina.log
                log_group_name = ${TomcatLogs}
                log_stream_name = {instance_id}/catalina.log
                multi_line_start_pattern = {datetime_format}
                datetime_format = %d-%b-%Y %H:%M:%S

                [/var/log/tomcat8/localhost.log]
                file = /var/log/tomcat8/localhost.log
                log_group_name = ${TomcatLogs}
                log_stream_name = {instance_id}/localhost.log
                multi_line_start_pattern = {datetime_format}
                datetime_format = %d-%b-%Y %H:%M:%S

                [/var/log/tomcat8/localhost_access.log]
                file = /var/log/tomcat8/localhost_access.log
                log_group_name = ${TomcatLogs}
                log_stream_name = {instance_id}/localhost_access.log
                multi_line_start_pattern = {datetime_format}
                datetime_format = %d-%b-%Y %H:%M:%S

                [/var/log/tomcat8/manager.log]
                file = /var/log/tomcat8/manager.log
                log_group_name = ${TomcatLogs}
                log_stream_name = {instance_id}/manager.log
                multi_line_start_pattern = {datetime_format}
                datetime_format = %d-%b-%Y %H:%M:%S

                [/var/log/tomcat8/host-manager.log]
                file = /var/log/tomcat8/host-manager.log
                log_group_name = ${TomcatLogs}
                log_stream_name = {instance_id}/host-manager.log
                multi_line_start_pattern = {datetime_format}
                datetime_format = %d-%b-%Y %H:%M:%S

                [/var/log/cron]
                file = /var/log/cron
                log_group_name = ${SystemLogs}
                log_stream_name = {instance_id}/cron.log
                multi_line_start_pattern = {datetime_format}
                datetime_format = %b %d %H:%M:%S

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${SystemLogs}
                log_stream_name = {instance_id}/messages.log
                datetime_format = %b %d %H:%M:%S
                multi_line_start_pattern = {datetime_format}

                [/var/log/syslog]
                file = /var/log/syslog
                datetime_format = %b %d %H:%M:%S
                log_group_name = ${SystemLogs}
                log_stream_name = {instance_id}/syslog.log
                multi_line_start_pattern = {datetime_format}
              group: root
              owner: root
              mode: '000444'
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/awslogs/awslogs.conf
    Properties:
      IamInstanceProfile: !Ref Ec2RoleInstanceProfile
      ImageId:
        !FindInMap [AWSRegionArch2AMI, !Ref "AWS::Region", !FindInMap [AWSInstanceType2Arch, !Ref InstanceType, Arch]]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      Monitoring: !Ref Monitoring
      DisableApiTermination: true
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: '0'
        GroupSet:
        - Ref: GitBucketSecurityGroup
        PrivateIpAddress: !Ref PrivateIpAddress
        SubnetId: !Ref SubnetId
      Tags:
      - Key: Name
        Value: !Sub |
          ${AWS::StackName} - GitBucket Server
      - Key: Application
        Value:
          Ref: AWS::StackId
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum -y update

            # Install Development tools
            yum -y groupinstall "Development tools"

            # Change timezone
            ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime

            # Helper function
            function error_exit
            {
              /opt/aws/bin/cfn-signal -e 1 -r "$1" '${WaitHandle}'
              exit 1
            }

            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v -s ${AWS::StackName} -r GitBucketServerInstance  --region ${AWS::Region}

            # Start up the cfn-hup daemon to listen for changes to the Web Server metadata
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} -r GitBucketServerInstance --region ${AWS::Region} '${WaitHandle}'
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn:
    - GitBucketServerInstance
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '5000'
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
Outputs:
  GitBucketServerInstanceId:
    Description: InstanceId of GitBucket Server
    Value: !Ref GitBucketServerInstance
