{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template db2expc_single_instance_chef: This template installs DB2 Express-C on a Red Hat Enterprise Linux 7.2 instance.",

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },

    "InstanceType" : {
      "Description" : "Database Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SubnetId" : {
      "Type" : "AWS::EC2::Subnet::Id",
      "Description" : "SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be an existing subnet in the selected Virtual Private Cloud."
    },

    "PrivateIpAddress" : {
      "Description" : "Private IP Address of Database Server",
      "Type" : "String",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "CookbookRepositoryUrl" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "https://github.com/kayu28/chef-db2expc.git"
    },

    "InstallerUrl" : {
      "Description" : "S3 bucket URL of the DB2 Express-C installer",
      "Type" : "String",
      "MinLength" : "1"
    },

    "NLPackUrl" : {
      "Description" : "S3 bucket URL of the DB2 Express-C national language package",
      "Type" : "String",
      "MinLength" : "1"
    },

    "InstanceUser" : {
      "Description" : "The user name of DB2 instance owner",
      "Type" : "String",
      "Default" : "db2inst1"
    },

    "InstancePassword" : {
      "Description" : "The user password of DB2 instance owner",
      "NoEcho": "true",
      "Type" : "String",
      "Default" : "db2inst1"
    },

    "DatabaseName" : {
      "Type" : "String"
    },

    "DB2Language" : {
      "Type" : "String",
      "MinLength" : "1",
      "Default" : "JP"
    },

    "DB2Version" : {
      "Type" : "String",
      "AllowedValues" : [ "10.5", "11.1" ],
      "Default" : "11.1"
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }

  },

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default":"Instance Configuration" },
          "Parameters" : [ "KeyName", "VpcId", "SubnetId", "PrivateIpAddress", "InstanceType", "SSHLocation" ]
        },
        {
          "Label" : { "default" : "Cookbook Common Configuration" },
          "Parameters" : [ "CookbookRepositoryUrl", "InstallerUrl", "NLPackUrl" ]
        },
        {
          "Label" : { "default" : "DB2 Configuration" },
          "Parameters" : [ "InstanceUser", "InstancePassword", "DB2Version", "DB2Language", "DatabaseName" ]
        }
      ]
    }
  },

  "Mappings": {
    "RegionMap" : {
      "us-east-1" : {
        "AMI" : "ami-2051294a"
      },
      "us-west-1" : {
        "AMI" : "ami-d1315fb1"
      },
      "us-west-2" : {
        "AMI" : "ami-775e4f16"
      },
      "eu-west-1" : {
        "AMI" : "ami-8b8c57f8"
      },
      "eu-central-1" : {
        "AMI" : "ami-875042eb"
      },
      "ap-southeast-1" : {
        "AMI" : "ami-3f03c55c"
      },
      "ap-southeast-2" : {
        "AMI" : "ami-e0c19f83"
      },
      "ap-northeast-1" : {
        "AMI" : "ami-0dd8f963"
      },
      "ap-northeast-2" : {
        "AMI" : "ami-44db152a"
      },
      "ap-south-1" : {
        "AMI" : "ami-cdbdd7a2"
      },
      "sa-east-1" : {
        "AMI" : "ami-27b3094b"
      }
    }
  },

  "Conditions" : {
    "NotCreateDatabase" : {"Fn::Equals" : [{"Ref" : "DatabaseName"}, ""]}
  },

  "Resources" : {

    "Ec2RoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "Ec2Role" } ]
      }
    },

    "Ec2Role" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"],
        "Policies" : [{
          "PolicyName": "s3",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": "*"
            }]
          }
        },
        {
          "PolicyName": "logs",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            }]
          }
        }]
      }
    },

    "DBServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VpcId" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "50000", "ToPort" : "50000", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0" }
         ],
        "Tags" : [
          {
            "Key": "Name",
            "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "DB2 Security Group"] ] }
          }
        ]
      }
    },

    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 365
      }
    },

    "DBServerInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : ["install_package", "install_cfn", "install_ssm_agent", "install_chef", "install_chefdk", "install_db2", "run_chef", "install_logs"]
          },
          "install_package" : {
            "packages" : {
              "yum" : {
                "wget"  : [],
                "unzip" : [],
                "git"   : []
              }
            }
          },

          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.DBServerInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackId" }, " -r DBServerInstance ",
                  " --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "install_ssm_agent" : {
            "packages" : {
              "rpm" : {
                "amazon-ssm-agent" : { "Fn::Join": [ "", [
                  "https://amazon-ssm-", { "Ref" : "AWS::Region" }, ".s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm"
                ]]}
              }
            },
            "services" : {
              "sysvinit" : {
                "amazon-ssm-agent" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          },

          "install_chef" : {
            "sources" : {
              "/var/chef/chef-repo" : "http://github.com/opscode/chef-repo/tarball/master"
            },
            "files" : {
              "/tmp/install.sh" : {
                "source" : "https://www.opscode.com/chef/install.sh",
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_make_chef_readable" : {
                "command" : "chmod +rx /var/chef"
              },
              "02_install_chef" : {
                "command" : "bash /tmp/install.sh",
                "cwd"  : "/var/chef"
              },
              "03_create_node_list" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "install_chefdk" : {
            "packages" : {
              "rpm" : {
                "chefdk" : "https://packages.chef.io/stable/el/7/chefdk-0.12.0-1.el7.x86_64.rpm"
              }
            }
          },

          "install_db2" : {
            "files" : {
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks/chef-db2expc/berks-cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n",
                  "data_bag_path [ '/var/chef/chef-repo/data_bags' ]\n",
                  "encrypted_data_bag_secret [ '/var/chef/chef-repo/secret_key' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks/chef-db2expc/berks-cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n",
                  "data_bag_path [ '/var/chef/chef-repo/data_bags' ]\n",
                  "encrypted_data_bag_secret [ '/var/chef/chef-repo/secret_key' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/cookbooks/chef-db2expc/attributes/normal.rb" : {
                "content": { "Fn::Join": [ "", [
                  "normal['db2']['installer_url']         = '", {"Ref" : "InstallerUrl"}, "'\n",
                  "normal['db2']['installer_file']        = 'v", {"Ref" : "DB2Version"}, "_linuxx64_expc.tar.gz'\n",
                  "normal['db2']['nlpack_url']            = '", {"Ref" : "NLPackUrl"}, "'\n",
                  "normal['db2']['nlpack_file']           = 'v", {"Ref" : "DB2Version"}, "_linuxx64_nlpack.tar.gz'\n",
                  "normal['db2']['db2_home']              = '/opt/ibm/db2/V", {"Ref" : "DB2Version"}, "'\n",
                  "normal['db2']['version']               = '", {"Ref" : "DB2Version"}, "'\n",
                  "normal['db2']['language']              = '", {"Ref" : "DB2Language"}, "'\n",
                  "normal['db2']['instance']['name']      = '", {"Ref" : "InstanceUser"}, "'\n",
                  "normal['db2']['instance']['password']  = '", {"Ref" : "InstancePassword"}, "'\n",
                  "normal['db2']['database']['name']      = ",
                  {"Fn::If" : [
                    "NotCreateDatabase",
                    "nil\n",
                    { "Fn::Join": [ "", [
                      "'", {"Ref" : "DatabaseName"}, "'\n"
                    ]]},
                  ]},
                  "normal['ntp']['servers']               = ['ntp.nict.jp', 'ntp.jst.mfeed.ad.jp']\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_git_init" : {
                "command" : "git init",
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-db2expc"
              },
              "02_get_cookbook" : {
                "command": { "Fn::Join": [ "", [
                  "git pull ", { "Ref": "CookbookRepositoryUrl" }
                ]]},
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-db2expc"
              },
              "03_init_berkshelf": {
                "command" : "berks init /var/chef/chef-repo/cookbooks/chef-db2expc --skip-vagrant --skip-git --no-chefignore",
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-db2expc",
                "env" : { "HOME" : "/var/chef" }
              },
              "04_vendorize_berkshelf" : {
                "command" : "berks vendor",
                "cwd" : "/var/chef/chef-repo/cookbooks/chef-db2expc",
                "env" : { "HOME" : "/var/chef" }
              },
              "05_configure_node_run_list" : {
                "command" : "knife node run_list add -z `knife node list -z` recipe[db2]",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "run_chef" : {
            "commands" : {
              "01_run_chef_client" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb | tee /var/log/chef-client-output.log",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "install_logs": {
            "files": {
              "/etc/awslogs/awslogs.conf": {
                "content": { "Fn::Join": [ "", [
                  "[general]\n",
                  "state_file= /var/awslogs/state/agent-state\n",

                  "[/var/log/cloud-init.log]\n",
                  "file = /var/log/cloud-init.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cloud-init.log\n",
                  "datetime_format = \n",

                  "[/var/log/cloud-init-output.log]\n",
                  "file = /var/log/cloud-init-output.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cloud-init-output.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-init.log]\n",
                  "file = /var/log/cfn-init.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-init.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-init-cmd.log]\n",
                  "file = /var/log/cfn-init-cmd.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-init-cmd.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-hup.log]\n",
                  "file = /var/log/cfn-hup.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-hup.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-wire.log]\n",
                  "file = /var/log/cfn-wire.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-wire.log\n",
                  "datetime_format = \n",

                  "[/var/log/chef-client-output.log]\n",
                  "file = /var/log/chef-client-output.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/chef-client-output.log\n",
                  "datetime_format = \n"

                ] ] },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awscli.conf": {
                "content": { "Fn::Join": [ "", [
                  "[plugins]\n",
                  "cwlogs = cwlogs\n",
                  "[default]\n",
                  "region = ", { "Ref" : "AWS::Region" }, "\n"
                ] ] },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            },
            "commands" : {
              "01_create_state_directory" : {
                "command" : "mkdir -p /var/awslogs/state"
              }
            }
          }

        }
      },

      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "Tags": [
            {
                "Key": "Name",
                "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "DB2 Server"] ] }
            },
            {
                "Key": "Application",
                "Value": { "Ref" : "AWS::StackId"}
            }
        ],
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
        "IamInstanceProfile" : {"Ref" : "Ec2RoleInstanceProfile"},
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "DBServerSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "SubnetId" },
          "PrivateIpAddress"         : { "Ref" : "PrivateIpAddress"}
        }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",

             "yum -y update\n",
             "yum -y install vim\n",
             "ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n",

             "# Install AWS CloudFormation helper scripts\n",
             "curl -kL https://bootstrap.pypa.io/get-pip.py | python\n",
             "easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
             "cp -f `pip show aws-cfn-bootstrap 2>/dev/null | grep -E \"^Location\" | awk -F: '{print $2}'`/init/redhat/cfn-hup /etc/init.d/\n",
             "chmod 755 /etc/init.d/cfn-hup\n",
             "chkconfig --add cfn-hup\n",

             "# Install AWS Command Line Interface\n",
             "pip install awscli\n",

             "# Install s3cmd\n",
             "pip install s3cmd\n",

             "function error_exit\n",
             "{\n",
             "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
             "  exit 1\n",
             "}\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r DBServerInstance ",
             "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

             "# Start up the cfn-hup daemon to listen for changes to the Web Server metadata\n",
             "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

             "# Get the CloudWatch Logs agent\n",
             "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -o /tmp/awslogs-agent-setup.py\n",

             "# Install the CloudWatch Logs agent\n",
             "python /tmp/awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /etc/awslogs/awslogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : ["DBServerInstance"],
      "Properties" : {
        "Handle" : { "Ref" : "WaitHandle" },
        "Timeout" : "3000"
      }
    }

  },

  "Outputs" : {
    "DBServerInstanceId" : {
      "Description" : "InstanceId of DB2",
      "Value" : { "Ref" : "DBServerInstance" }
    }
  }
}
