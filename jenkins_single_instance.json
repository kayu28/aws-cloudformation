{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template jenkins_single_instance: This template installs Jenkins Master Server on a CentOS 7 instance.",

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "Jenkins server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },

    "SubnetId" : {
      "Type" : "AWS::EC2::Subnet::Id",
      "Description" : "SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be an existing subnet in the selected Virtual Private Cloud."
    },

    "PrivateIpAddress" : {
      "Description" : "Private IP Address of Jenkins Server",
      "Type" : "String",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "GitVersion" : {
      "Description" : "Git version",
      "Type": "String",
      "MinLength" : "1",
      "Default": "2.9.2"
    },

    "MavenVersion" : {
      "Description" : "Maven version",
      "Type": "String",
      "MinLength" : "1",
      "Default": "3.3.9"
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default":"Jenkins Server Configuration" },
          "Parameters" : [ "KeyName", "InstanceType", "VpcId", "SubnetId", "PrivateIpAddress" , "GitVersion", "MavenVersion", "SSHLocation"]
        }
      ]
    }
  },

  "Mappings": {
    "RegionMap" : {
      "us-east-1" : {
        "AMI" : "ami-6d1c2007"
      },
      "us-west-1" : {
        "AMI" : "ami-af4333cf"
      },
      "us-west-2" : {
        "AMI" : "ami-d2c924b2"
      },
      "eu-west-1" : {
        "AMI" : "ami-7abd0209"
      },
      "eu-central-1" : {
        "AMI" : "ami-9bf712f4"
      },
      "ap-southeast-1" : {
        "AMI" : "ami-f068a193"
      },
      "ap-southeast-2" : {
        "AMI" : "ami-fedafc9d"
      },
      "ap-northeast-1" : {
        "AMI" : "ami-eec1c380"
      },
      "ap-northeast-2" : {
        "AMI" : "ami-c74789a9"
      },
      "ap-south-1" : {
        "AMI" : "ami-95cda6fa"
      },
      "sa-east-1" : {
        "AMI" : "ami-26b93b4a"
      }
    }
  },

  "Resources" : {

    "JenkinsSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VpcId" },
        "GroupDescription" : "Jenkins server Security group",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags" : [
          {
            "Key": "Name",
            "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "Jenkins Security Group"] ] }
          }
        ]
      }
    },

    "Ec2RoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "Ec2Role" } ]
      }
    },

    "Ec2Role" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"],
        "Policies" : [{
          "PolicyName": "s3",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": "*"
            }]
          }
        },
        {
          "PolicyName": "logs",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            }]
          }
        }]
      }
    },

    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 365
      }
    },

    "WebServerLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },

    "JenkinsServerInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "JenkinsSecurityGroup",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : ["install_package", "install_cfn", "install_git", "install_jq", "install_jenkins", "install_httpd", "install_maven", "install_logs"]
          },

          "install_package" : {
            "packages" : {
              "yum" : {
                "wget"   : [],
                "java-1.7.0-openjdk-devel"  : [],
                "java-1.8.0-openjdk-devel"  : []
              }
            }
          },

          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.JenkinsServerInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackId" }, " -r JenkinsServerInstance ",
                  " --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "install_git" : {
            "sources" : {
              "/usr/local/src" : { "Fn::Join": [ "", [
                "https://www.kernel.org/pub/software/scm/git/git-", { "Ref": "GitVersion" }, ".tar.gz"
              ]]}
            },
            "commands" : {
              "01_install_package" : {
                "command" : "yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-ExtUtils-MakeMaker gcc"
              },
              "02_make_all" : {
                "command": { "Fn::Join": [ "", [
                  "make -C /usr/local/src/git-", { "Ref": "GitVersion" }, " prefix=/usr/local all"
                ]]}
              },
              "03_make_install" : {
                "command": { "Fn::Join": [ "", [
                  "make -C /usr/local/src/git-", { "Ref": "GitVersion" }, " prefix=/usr/local install"
                ]]}
              }
            }
          },

          "install_jq" : {
            "commands" : {
              "01_install" : {
                "command" : "curl -o /usr/bin/jq http://stedolan.github.io/jq/download/linux64/jq"
              },
              "02_change_mode" : {
                "command" : "chmod +x /usr/bin/jq"
              }
            }
          },

          "install_jenkins" : {
            "commands" : {
              "01_install_jenkins" : {
                "command": { "Fn::Join": [ "", [
                  "wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\n",
                  "rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n",
                  "yum -y install jenkins\n"
                ]]}
              },
              "02_visudo" : {
                "command": { "Fn::Join": [ "", [
                  "echo 'Defaults:jenkins     !requiretty' >> /etc/sudoers\n",
                  "echo 'jenkins     ALL=(ALL)     NOPASSWD:ALL' >> /etc/sudoers\n"
                ]]}
              },
              "03_change_prefix" : {
                "command": { "Fn::Join": [ "", [
                  "sed -i -e '/JENKINS_ARGS/d' /etc/sysconfig/jenkins\n",
                  "echo JENKINS_ARGS=\"--prefix=/jenkins\" >> /etc/sysconfig/jenkins\n"
                ]]}
              }
            },
            "services" : {
              "sysvinit" : {
                "jenkins" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          },

          "install_httpd" : {
            "packages" : {
              "yum" : {
                "httpd"  : []
              }
            },
            "files" : {
              "/etc/httpd/conf.d/jenkins.conf" : {
                "content" : { "Fn::Join": [ "", [
                  "ProxyRequests Off\n",
                  "AllowEncodedSlashes NoDecode\n",
                  "<Location \"/jenkins\">\n",
                  "  ProxyPass         http://localhost:8080/jenkins nocanon\n",
                  "  ProxyPassReverse  http://localhost:8080/jenkins\n",
                  "</Location>\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_setsebool" : {
                "command" : "setsebool -P httpd_can_network_connect 1"
              }
            },
            "services" : {
              "sysvinit" : {
                "httpd"    : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          },

          "install_maven" : {
            "sources" : {
              "/opt" : { "Fn::Join": [ "", [
                "https://archive.apache.org/dist/maven/maven-3/", { "Ref": "MavenVersion" }, "/binaries/apache-maven-", { "Ref": "MavenVersion" }, "-bin.tar.gz"
              ]]}
            },
            "files" : {
              "/etc/profile.d/maven.sh" : {
                "content" : { "Fn::Join": [ "", [
                  "export M3_HOME=\"/opt/apache-maven-", { "Ref": "MavenVersion" }, "\"\n",
                  "export PATH=\"${M3_HOME}/bin:${PATH}\"\n"
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              }
            }
          },

          "install_logs": {
            "files": {
              "/etc/awslogs/awslogs.conf": {
                "content": { "Fn::Join": [ "", [
                  "[general]\n",
                  "state_file= /var/awslogs/state/agent-state\n",

                  "[/var/log/cloud-init.log]\n",
                  "file = /var/log/cloud-init.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cloud-init.log\n",
                  "datetime_format = \n",

                  "[/var/log/cloud-init-output.log]\n",
                  "file = /var/log/cloud-init-output.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cloud-init-output.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-init.log]\n",
                  "file = /var/log/cfn-init.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-init.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-init-cmd.log]\n",
                  "file = /var/log/cfn-init-cmd.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-init-cmd.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-hup.log]\n",
                  "file = /var/log/cfn-hup.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-hup.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-wire.log]\n",
                  "file = /var/log/cfn-wire.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-wire.log\n",
                  "datetime_format = \n",

                  "[/var/log/httpd/access_log]\n",
                  "file = /var/log/httpd/access_log\n",
                  "log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
                  "log_stream_name = {instance_id}/apache.log\n",
                  "datetime_format = %d/%b/%Y:%H:%M:%S"

                ] ] },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awscli.conf": {
                "content": { "Fn::Join": [ "", [
                  "[plugins]\n",
                  "cwlogs = cwlogs\n",
                  "[default]\n",
                  "region = ", { "Ref" : "AWS::Region" }, "\n"
                ] ] },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            },
            "commands" : {
              "01_create_state_directory" : {
                "command" : "mkdir -p /var/awslogs/state"
              }
            }
          }

        }
      },

      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "Tags": [
            {
                "Key": "Name",
                "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "Jenkins Master Server"] ] }
            },
            {
                "Key": "Application",
                "Value": { "Ref" : "AWS::StackId"}
            }
        ],
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
        "IamInstanceProfile" : {"Ref" : "Ec2RoleInstanceProfile"},
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "JenkinsSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "SubnetId" },
          "PrivateIpAddress"         : { "Ref" : "PrivateIpAddress"}
        }],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",

             "yum -y update\n",
             "yum -y install vim convmv\n",
             "ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n",

             "# Install AWS CloudFormation helper scripts\n",
             "curl -kL https://bootstrap.pypa.io/get-pip.py | python\n",
             "easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
             "cp -f `pip show aws-cfn-bootstrap 2>/dev/null | grep -E \"^Location\" | awk -F: '{print $2}'`/init/redhat/cfn-hup /etc/init.d/\n",
             "chmod 755 /etc/init.d/cfn-hup\n",
             "chkconfig --add cfn-hup\n",

             "# Install AWS Command Line Interface\n",
             "pip install awscli\n",

             "# Install s3cmd\n",
             "pip install s3cmd\n",

             "function error_exit\n",
             "{\n",
             "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
             "  exit 1\n",
             "}\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r JenkinsServerInstance ",
             "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

             "# Start up the cfn-hup daemon to listen for changes to the Web Server metadata\n",
             "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

             "# Get the CloudWatch Logs agent\n",
             "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -o /tmp/awslogs-agent-setup.py\n",

             "# Install the CloudWatch Logs agent\n",
             "python /tmp/awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /etc/awslogs/awslogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : ["JenkinsServerInstance"],
      "Properties" : {
        "Handle" : { "Ref" : "WaitHandle" },
        "Timeout" : "2000"
      }
    }

  },

  "Outputs" : {
    "JenkinsServerInstanceId" : {
      "Description" : "InstanceId of Jenkins Server",
      "Value" : { "Ref" : "JenkinsServerInstance" }
    },
    "JenkinsServerPublicIP" : {
      "Description" : "Public IP address of Jenkins Server",
      "Value" : { "Fn::GetAtt" : [ "JenkinsServerInstance", "PublicIp" ] }
    },
    "JenkinsURL" : {
      "Description" : "Jenkins URL",
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "JenkinsServerInstance", "PublicIp" ]}, "/jenkins" ]] }
    }
  }
}
