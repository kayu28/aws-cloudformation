AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
  License: Apache-2.0
Description: 'AWS CloudFormation Template vpc_multiple_subnets_with_flowlog: Create a VPC with multiple subnets.'
Parameters:
  VpcName:
    AllowedPattern: '[-a-zA-Z0-9]*'
    ConstraintDescription: ''
    Description: Virtual Private Cloud name
    MaxLength: '20'
    MinLength: '1'
    Type: String
  VpcCidrBlock:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/16
    ConstraintDescription: ''
    Default: 10.0.0.0/16
    Description: The IP address range in VPC
    Type: String
  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: ''
    Description: The Availability Zone 1
  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: ''
    Description: The Availability Zone 2
  SubnetCidrBlockExternalAz1:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/24
    ConstraintDescription: ''
    Default: 10.0.0.0/24
    Description: The IP address range in external subnet Az1
    Type: String
  SubnetCidrBlockExternalAz2:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/24
    ConstraintDescription: ''
    Default: 10.0.1.0/24
    Description: The IP address range in external subnet Az2
    Type: String
  SubnetCidrBlockPublicAz1:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/24
    ConstraintDescription: ''
    Default: 10.0.32.0/24
    Description: The IP address range in public subnet Az1
    Type: String
  SubnetCidrBlockPublicAz2:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/24
    ConstraintDescription: ''
    Default: 10.0.33.0/24
    Description: The IP address range in public subnet Az2
    Type: String
  SubnetCidrBlockPrivateAz1:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/24
    ConstraintDescription: ''
    Default: 10.0.64.0/24
    Description: The IP address range in private subnet Az1
    Type: String
  SubnetCidrBlockPrivateAz2:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/24
    ConstraintDescription: ''
    Default: 10.0.65.0/24
    Description: The IP address range in private subnet Az2
    Type: String
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  FlowLogRoleName:
    AllowedPattern: '[-a-zA-Z0-9]*'
    ConstraintDescription: ''
    Description: The name for the FlowLog IAM role
    MaxLength: '20'
    MinLength: '1'
    Type: String
    Default: flowlog-role
  FlowLogGroupName:
    AllowedPattern: '[-a-zA-Z0-9]*'
    ConstraintDescription: ''
    Description: The name of a new CloudWatch Logs log group
    MaxLength: '20'
    MinLength: '1'
    Type: String
    Default: flowlogs
  FlowLogTrafficType:
    ConstraintDescription: ''
    Description: The type of traffic to log
    Type: String
    AllowedValues:
    - ALL
    - ACCEPT
    - REJECT
    Default: ALL
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC Configuration
      Parameters:
      - VpcName
      - VpcCidrBlock
      - AvailabilityZone1
      - AvailabilityZone2
      - SubnetCidrBlockExternalAz1
      - SubnetCidrBlockExternalAz2
      - SubnetCidrBlockPublicAz1
      - SubnetCidrBlockPublicAz2
      - SubnetCidrBlockPrivateAz1
      - SubnetCidrBlockPrivateAz2
      - SSHLocation
    - Label:
        default: Flow Log Configuration
      Parameters:
      - FlowLogRoleName
      - FlowLogGroupName
      - FlowLogTrafficType
Mappings:
  ShortAzMap:
    ap-northeast-1a:
      short: 1a
    ap-northeast-1c:
      short: 1c
    ap-northeast-2a:
      short: 2a
    ap-northeast-2c:
      short: 2c
    ap-south-1a:
      short: 1a
    ap-south-1b:
      short: 1b
    ap-southeast-1a:
      short: 1a
    ap-southeast-1b:
      short: 1b
    ap-southeast-2a:
      short: 1a
    ap-southeast-2b:
      short: 1b
    ap-southeast-2c:
      short: 1c
    eu-central-1a:
      short: 1a
    eu-central-1b:
      short: 1b
    eu-west-1a:
      short: 1a
    eu-west-1b:
      short: 1b
    eu-west-1c:
      short: 1c
    sa-east-1a:
      short: 1a
    sa-east-1c:
      short: 1c
    us-east-1a:
      short: 1a
    us-east-1b:
      short: 1b
    us-east-1d:
      short: 1d
    us-east-1e:
      short: 1e
    us-west-1a:
      short: 1a
    us-west-1b:
      short: 1b
    us-west-2a:
      short: 1a
    us-west-2b:
      short: 1b
    us-west-2c:
      short: 1c
Resources:
  FlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - vpc-flow-logs.amazonaws.com
      Path: "/"
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - logs:*
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      RoleName: !Ref FlowLogRoleName
  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      LogGroupName: !Ref FlowLogGroupName
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: !Ref FlowLogTrafficType
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Ref VpcName
  PublicSubnetExternalAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref SubnetCidrBlockExternalAz1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Join ['-', [!Ref 'VpcName', 'public-subnet-external', !FindInMap [ShortAzMap, !Ref 'AvailabilityZone1', short]]]
      - Key: Network
        Value: Public
  PublicSubnetExternalAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref SubnetCidrBlockExternalAz2
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Join ['-', [!Ref 'VpcName', 'public-subnet-external', !FindInMap [ShortAzMap, !Ref 'AvailabilityZone2', short]]]
      - Key: Network
        Value: Public
  PublicSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref SubnetCidrBlockPublicAz1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Join ['-', [!Ref 'VpcName', 'public-subnet', !FindInMap [ShortAzMap, !Ref 'AvailabilityZone1', short]]]
      - Key: Network
        Value: Public
  PublicSubnetAz2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref SubnetCidrBlockPublicAz2
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Join ['-', [!Ref 'VpcName', 'public-subnet', !FindInMap [ShortAzMap, !Ref 'AvailabilityZone2', short]]]
      - Key: Network
        Value: Public
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Sub |
          ${VpcName}-igw
      - Key: Network
        Value: Public
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Sub |
          ${VpcName}-public-route-table
      - Key: Network
        Value: Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicExternalSubnetRouteTableAssociationAz1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetExternalAz1
  PublicExternalSubnetRouteTableAssociationAz2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetExternalAz2
  PublicSubnetRouteTableAssociationAz1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAz1
  PublicSubnetRouteTableAssociationAz2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAz2
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Sub |
          ${VpcName}-public-networkacl
      - Key: Network
        Value: Public
  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
  InboundHTTPSPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '110'
  InboundSSHPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref SSHLocation
      Egress: 'false'
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: '22'
        To: '22'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '120'
  InboundEphemeralPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '130'
  InboundIcmpPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      Icmp:
        Code: '-1'
        Type: '-1'
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: '1'
      RuleAction: allow
      RuleNumber: '140'
  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
  PublicExternalSubnetNetworkAclAssociationAz1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetExternalAz1
  PublicExternalSubnetNetworkAclAssociationAz2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetExternalAz2
  PublicSubnetNetworkAclAssociationAz1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetAz1
  PublicSubnetNetworkAclAssociationAz2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetAz2
  PrivateSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref SubnetCidrBlockPrivateAz1
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Join ['-', [!Ref 'VpcName', 'private-subnet', !FindInMap [ShortAzMap, !Ref 'AvailabilityZone1', short]]]
      - Key: Network
        Value: Private
  PrivateSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref SubnetCidrBlockPrivateAz2
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Join ['-', [!Ref 'VpcName', 'private-subnet', !FindInMap [ShortAzMap, !Ref 'AvailabilityZone2', short]]]
      - Key: Network
        Value: Private
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Sub |
          ${VpcName}-private-route-table
      - Key: Network
        Value: Private
  PrivateSubnetRouteTableAssociationAz1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetAz1
  PrivateSubnetRouteTableAssociationAz2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetAz2
  InboundEphemeralPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '110'
  InboundIcmpPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      Icmp:
        Code: '-1'
        Type: '-1'
      NetworkAclId: !Ref PrivateNetworkAcl
      Protocol: '1'
      RuleAction: allow
      RuleNumber: '120'
  InboundSSHPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: 'false'
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: '22'
        To: '22'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
  OutBoundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Sub |
          ${VpcName}-private-networkacl
      - Key: Network
        Value: Private
  PrivateSubnetNetworkAclAssociationAz1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      SubnetId: !Ref PrivateSubnetAz1
  PrivateSubnetNetworkAclAssociationAz2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      SubnetId: !Ref PrivateSubnetAz2
Outputs:
  VPCId:
    Description: VPCId of the newly created VPC
    Value: !Ref VPC
  PublicExternalSubnetIdAz1:
    Description: SubnetId of External Subnet AZ1
    Value: !Ref PublicSubnetExternalAz1
  PublicExternalSubnetIdAz2:
    Description: SubnetId of External Subnet AZ2
    Value: !Ref PublicSubnetExternalAz2
  PublicSubnetIdAz1:
    Description: SubnetId of Public Subnet AZ1
    Value: !Ref PublicSubnetAz1
  PublicSubnetIdAz2:
    Description: SubnetId of Public Subnet AZ2
    Value: !Ref PublicSubnetAz2
  PrivateSubnetIdAz1:
    Description: SubnetId of Private Subnet AZ1
    Value: !Ref PrivateSubnetAz1
  PrivateSubnetIdAz2:
    Description: SubnetId of Private Subnet AZ2
    Value: !Ref PrivateSubnetAz2
