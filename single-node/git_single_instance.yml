AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template git_single_instance: This template installs Git daemon on a Amazon Linux instance.'
Mappings:
  AWSInstanceType2Arch:
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    m1.large:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.small:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m3.2xlarge:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    t1.micro:
      Arch: PV64
    t2.large:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-374db956
      HVMG2: ami-34a9a35a
      PV64: ami-3e42b65f
    ap-northeast-2:
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    ap-south-1:
      HVM64: ami-ffbdd790
      HVMG2: ami-f5b2d89a
      PV64: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-a59b49c6
      HVMG2: ami-0cb5676f
      PV64: ami-df9e4cbc
    ap-southeast-2:
      HVM64: ami-dc361ebf
      HVMG2: ami-a71c34c4
      PV64: ami-63351d00
    eu-central-1:
      HVM64: ami-ea26ce85
      HVMG2: ami-7f04ec10
      PV64: ami-6527cf0a
    eu-west-1:
      HVM64: ami-f9dd458a
      HVMG2: ami-b9bd25ca
      PV64: ami-4cdd453f
    sa-east-1:
      HVM64: ami-6dd04501
      HVMG2: NOT_SUPPORTED
      PV64: ami-1ad34676
    us-east-1:
      HVM64: ami-6869aa05
      HVMG2: ami-2e5e9c43
      PV64: ami-2a69aa47
    us-west-1:
      HVM64: ami-31490d51
      HVMG2: ami-fd76329d
      PV64: ami-a2490dc2
    us-west-2:
      HVM64: ami-7172b611
      HVMG2: ami-83b770e3
      PV64: ami-7f77b31f
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Git Server Configuration
      Parameters:
      - KeyName
      - InstanceType
      - AMIImageId
      - VpcId
      - SubnetId
      - PrivateIpAddress
      - SSHLocation
Outputs:
  GitServerInstanceId:
    Description: InstanceId of Git Server
    Value:
      Ref: GitServerInstance
Parameters:
  InstanceType:
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Description: gitserver EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  PrivateIpAddress:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: Private IP address of gitserver
    Type: String
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  SubnetId:
    ConstraintDescription: must be an existing subnet in the selected Virtual Private Cloud.
    Description: SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)
    Type: AWS::EC2::Subnet::Id
  VpcId:
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Type: AWS::EC2::VPC::Id
Resources:
  CloudFormationLogs:
    Properties:
      RetentionInDays: 365
    Type: AWS::Logs::LogGroup
  Ec2Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: s3
      - PolicyDocument:
          Statement:
          - Action:
            - logs:*
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: '2012-10-17'
        PolicyName: logs
    Type: AWS::IAM::Role
  Ec2RoleInstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: Ec2Role
    Type: AWS::IAM::InstanceProfile
  GitSecurityGroup:
    Properties:
      GroupDescription: Git server Security group
      SecurityGroupIngress:
      - CidrIp:
          Ref: SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      - CidrIp:
          Ref: SSHLocation
        FromPort: '9418'
        IpProtocol: tcp
        ToPort: '9418'
      - CidrIp: 0.0.0.0/0
        FromPort: '-1'
        IpProtocol: icmp
        ToPort: '-1'
      Tags:
      - Key: Name
        Value: !Sub |
          !Ref  "AWS::StackName" Git Security Group
      VpcId:
        Ref: VpcId
    Type: AWS::EC2::SecurityGroup
  GitServerInstance:
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - install_cfn
          - install_ssm_agent
          - install_git
          - install_logs
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.GitServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r GitServerInstance --region ${AWS::Region}
                runas=root
              group: root
              mode: '000400'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_ssm_agent:
          commands:
            01_install_ssm_agent:
              command: !Sub |
                mkdir /tmp/ssm
                curl https://amazon-ssm-'${AWS::Region}'.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/ssm/amazon-ssm-agent.rpm
                yum install -y /tmp/ssm/amazon-ssm-agent.rpm
                status amazon-ssm-agent
        install_git:
          commands:
            01_create_gituser:
              command: !Sub |
                useradd -s /usr/bin/git-shell git
                chown -R git:git /var/lib/git
                chmod 755 /var/lib/git
                mkdir /home/git/.ssh
                touch /home/git/.ssh/authorized_keys
                chown -R git:git /home/git/.ssh
                chmod 700 /home/git/.ssh
                chmod 600 /home/git/.ssh/authorized_keys
            02_restart_xinetd:
              command: /etc/init.d/xinetd restart
            03_create_dummy_repo:
              command: !Sub |
                mkdir -p /var/lib/git/dummy.git
                git init --bare --shared /var/lib/git/dummy.git
                chown -R git:git /var/lib/git/dummy.git
          files:
            /etc/xinetd.d/git:
              content: !Sub |
                # description: The git damon allows git repositories to be exported using the git:// protocol.
                service git
                {
                         disable         = no
                         socket_type     = stream
                         wait            = no
                         user            = git
                         server          = /usr/libexec/git-core/git-daemon
                         server_args     = --base-path=/var/lib/git --export-all --user-path=public_git --syslog --inetd --verbose
                         log_on_failure  += USERID
                }
              group: root
              mode: '000400'
              owner: root
          packages:
            yum:
              git: []
              git-all: []
              git-daemon: []
        install_logs:
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              group: root
              mode: '000444'
              owner: root
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format = 

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format = 

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format = 

                [/var/log/cfn-init-cmd.log]
                file = /var/log/cfn-init-cmd.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/cfn-init-cmd.log
                datetime_format = 

                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/cfn-hup.log
                datetime_format = 

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format = 
              group: root
              mode: '000444'
              owner: root
          packages:
            yum:
              awslogs: []
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/awslogs/awslogs.conf
    Properties:
      IamInstanceProfile:
        Ref: Ec2RoleInstanceProfile
      ImageId:
        !FindInMap [AWSRegionArch2AMI, !Ref "AWS::Region", !FindInMap [AWSInstanceType2Arch, !Ref InstanceType, Arch]]
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: '0'
        GroupSet:
        - Ref: GitSecurityGroup
        PrivateIpAddress:
          Ref: PrivateIpAddress
        SubnetId:
          Ref: SubnetId
      Tags:
      - Key: Name
        Value: !Sub |
          ${AWS::StackName} - Git Master Server
      - Key: Application
        Value:
          Ref: AWS::StackId
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum -y update
            yum -y install vim
            ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime

            # Install s3cmd
            yum -y --enablerepo epel install s3cmd

            # Helper function
            function error_exit
            {
              /opt/aws/bin/cfn-signal -e 1 -r "$1" '${WaitHandle}'
              exit 1
            }

            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v -s ${AWS::StackName} -r GitServerInstance  --region ${AWS::Region} || error_exit 'Failed to run cfn-init'

            # Start up the cfn-hup daemon to listen for changes to the Web Server metadata
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} -r GitServerInstance --region ${AWS::Region} '${WaitHandle}'
    Type: AWS::EC2::Instance
  WaitCondition:
    DependsOn:
    - GitServerInstance
    Properties:
      Handle:
        Ref: WaitHandle
      Timeout: '1500'
    Type: AWS::CloudFormation::WaitCondition
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
